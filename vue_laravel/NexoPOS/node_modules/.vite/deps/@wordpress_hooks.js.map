{
  "version": 3,
  "sources": ["../../@wordpress/hooks/build-module/@wordpress/hooks/src/validateNamespace.js", "../../@wordpress/hooks/build-module/@wordpress/hooks/src/validateHookName.js", "../../@wordpress/hooks/build-module/@wordpress/hooks/src/createAddHook.js", "../../@wordpress/hooks/build-module/@wordpress/hooks/src/createRemoveHook.js", "../../@wordpress/hooks/build-module/@wordpress/hooks/src/createHasHook.js", "../../@wordpress/hooks/build-module/@wordpress/hooks/src/createRunHook.js", "../../@wordpress/hooks/build-module/@wordpress/hooks/src/createCurrentHook.js", "../../@wordpress/hooks/build-module/@wordpress/hooks/src/createDoingHook.js", "../../@wordpress/hooks/build-module/@wordpress/hooks/src/createDidHook.js", "../../@wordpress/hooks/build-module/@wordpress/hooks/src/createHooks.js", "../../@wordpress/hooks/build-module/@wordpress/hooks/src/index.js"],
  "sourcesContent": ["/**\n * Validate a namespace string.\n *\n * @param {string} namespace The namespace to validate - should take the form\n *                           `vendor/plugin/function`.\n *\n * @return {boolean} Whether the namespace is valid.\n */\nfunction validateNamespace( namespace ) {\n\tif ( 'string' !== typeof namespace || '' === namespace ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error( 'The namespace must be a non-empty string.' );\n\t\treturn false;\n\t}\n\n\tif ( ! /^[a-zA-Z][a-zA-Z0-9_.\\-\\/]*$/.test( namespace ) ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error(\n\t\t\t'The namespace can only contain numbers, letters, dashes, periods, underscores and slashes.'\n\t\t);\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport default validateNamespace;\n", "/**\n * Validate a hookName string.\n *\n * @param {string} hookName The hook name to validate. Should be a non empty string containing\n *                          only numbers, letters, dashes, periods and underscores. Also,\n *                          the hook name cannot begin with `__`.\n *\n * @return {boolean} Whether the hook name is valid.\n */\nfunction validateHookName( hookName ) {\n\tif ( 'string' !== typeof hookName || '' === hookName ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error( 'The hook name must be a non-empty string.' );\n\t\treturn false;\n\t}\n\n\tif ( /^__/.test( hookName ) ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error( 'The hook name cannot begin with `__`.' );\n\t\treturn false;\n\t}\n\n\tif ( ! /^[a-zA-Z][a-zA-Z0-9_.-]*$/.test( hookName ) ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error(\n\t\t\t'The hook name can only contain numbers, letters, dashes, periods and underscores.'\n\t\t);\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport default validateHookName;\n", "/**\n * Internal dependencies\n */\nimport validateNamespace from './validateNamespace.js';\nimport validateHookName from './validateHookName.js';\n\n/**\n * @callback AddHook\n *\n * Adds the hook to the appropriate hooks container.\n *\n * @param {string}               hookName      Name of hook to add\n * @param {string}               namespace     The unique namespace identifying the callback in the form `vendor/plugin/function`.\n * @param {import('.').Callback} callback      Function to call when the hook is run\n * @param {number}               [priority=10] Priority of this hook\n */\n\n/**\n * Returns a function which, when invoked, will add a hook.\n *\n * @param {import('.').Hooks}    hooks    Hooks instance.\n * @param {import('.').StoreKey} storeKey\n *\n * @return {AddHook} Function that adds a new hook.\n */\nfunction createAddHook( hooks, storeKey ) {\n\treturn function addHook( hookName, namespace, callback, priority = 10 ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\tif ( ! validateHookName( hookName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! validateNamespace( namespace ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( 'function' !== typeof callback ) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error( 'The hook callback must be a function.' );\n\t\t\treturn;\n\t\t}\n\n\t\t// Validate numeric priority\n\t\tif ( 'number' !== typeof priority ) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error(\n\t\t\t\t'If specified, the hook priority must be a number.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst handler = { callback, priority, namespace };\n\n\t\tif ( hooksStore[ hookName ] ) {\n\t\t\t// Find the correct insert index of the new hook.\n\t\t\tconst handlers = hooksStore[ hookName ].handlers;\n\n\t\t\t/** @type {number} */\n\t\t\tlet i;\n\t\t\tfor ( i = handlers.length; i > 0; i-- ) {\n\t\t\t\tif ( priority >= handlers[ i - 1 ].priority ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( i === handlers.length ) {\n\t\t\t\t// If append, operate via direct assignment.\n\t\t\t\thandlers[ i ] = handler;\n\t\t\t} else {\n\t\t\t\t// Otherwise, insert before index via splice.\n\t\t\t\thandlers.splice( i, 0, handler );\n\t\t\t}\n\n\t\t\t// We may also be currently executing this hook.  If the callback\n\t\t\t// we're adding would come after the current callback, there's no\n\t\t\t// problem; otherwise we need to increase the execution index of\n\t\t\t// any other runs by 1 to account for the added element.\n\t\t\thooksStore.__current.forEach( ( hookInfo ) => {\n\t\t\t\tif (\n\t\t\t\t\thookInfo.name === hookName &&\n\t\t\t\t\thookInfo.currentIndex >= i\n\t\t\t\t) {\n\t\t\t\t\thookInfo.currentIndex++;\n\t\t\t\t}\n\t\t\t} );\n\t\t} else {\n\t\t\t// This is the first hook of its type.\n\t\t\thooksStore[ hookName ] = {\n\t\t\t\thandlers: [ handler ],\n\t\t\t\truns: 0,\n\t\t\t};\n\t\t}\n\n\t\tif ( hookName !== 'hookAdded' ) {\n\t\t\thooks.doAction(\n\t\t\t\t'hookAdded',\n\t\t\t\thookName,\n\t\t\t\tnamespace,\n\t\t\t\tcallback,\n\t\t\t\tpriority\n\t\t\t);\n\t\t}\n\t};\n}\n\nexport default createAddHook;\n", "/**\n * Internal dependencies\n */\nimport validateNamespace from './validateNamespace.js';\nimport validateHookName from './validateHookName.js';\n\n/**\n * @callback RemoveHook\n * Removes the specified callback (or all callbacks) from the hook with a given hookName\n * and namespace.\n *\n * @param {string} hookName  The name of the hook to modify.\n * @param {string} namespace The unique namespace identifying the callback in the\n *                           form `vendor/plugin/function`.\n *\n * @return {number | undefined} The number of callbacks removed.\n */\n\n/**\n * Returns a function which, when invoked, will remove a specified hook or all\n * hooks by the given name.\n *\n * @param {import('.').Hooks}    hooks             Hooks instance.\n * @param {import('.').StoreKey} storeKey\n * @param {boolean}              [removeAll=false] Whether to remove all callbacks for a hookName,\n *                                                 without regard to namespace. Used to create\n *                                                 `removeAll*` functions.\n *\n * @return {RemoveHook} Function that removes hooks.\n */\nfunction createRemoveHook( hooks, storeKey, removeAll = false ) {\n\treturn function removeHook( hookName, namespace ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\tif ( ! validateHookName( hookName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! removeAll && ! validateNamespace( namespace ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Bail if no hooks exist by this name.\n\t\tif ( ! hooksStore[ hookName ] ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet handlersRemoved = 0;\n\n\t\tif ( removeAll ) {\n\t\t\thandlersRemoved = hooksStore[ hookName ].handlers.length;\n\t\t\thooksStore[ hookName ] = {\n\t\t\t\truns: hooksStore[ hookName ].runs,\n\t\t\t\thandlers: [],\n\t\t\t};\n\t\t} else {\n\t\t\t// Try to find the specified callback to remove.\n\t\t\tconst handlers = hooksStore[ hookName ].handlers;\n\t\t\tfor ( let i = handlers.length - 1; i >= 0; i-- ) {\n\t\t\t\tif ( handlers[ i ].namespace === namespace ) {\n\t\t\t\t\thandlers.splice( i, 1 );\n\t\t\t\t\thandlersRemoved++;\n\t\t\t\t\t// This callback may also be part of a hook that is\n\t\t\t\t\t// currently executing.  If the callback we're removing\n\t\t\t\t\t// comes after the current callback, there's no problem;\n\t\t\t\t\t// otherwise we need to decrease the execution index of any\n\t\t\t\t\t// other runs by 1 to account for the removed element.\n\t\t\t\t\thooksStore.__current.forEach( ( hookInfo ) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\thookInfo.name === hookName &&\n\t\t\t\t\t\t\thookInfo.currentIndex >= i\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\thookInfo.currentIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( hookName !== 'hookRemoved' ) {\n\t\t\thooks.doAction( 'hookRemoved', hookName, namespace );\n\t\t}\n\n\t\treturn handlersRemoved;\n\t};\n}\n\nexport default createRemoveHook;\n", "/**\n * @callback HasHook\n *\n * Returns whether any handlers are attached for the given hookName and optional namespace.\n *\n * @param {string} hookName    The name of the hook to check for.\n * @param {string} [namespace] Optional. The unique namespace identifying the callback\n *                             in the form `vendor/plugin/function`.\n *\n * @return {boolean} Whether there are handlers that are attached to the given hook.\n */\n/**\n * Returns a function which, when invoked, will return whether any handlers are\n * attached to a particular hook.\n *\n * @param {import('.').Hooks}    hooks    Hooks instance.\n * @param {import('.').StoreKey} storeKey\n *\n * @return {HasHook} Function that returns whether any handlers are\n *                   attached to a particular hook and optional namespace.\n */\nfunction createHasHook( hooks, storeKey ) {\n\treturn function hasHook( hookName, namespace ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\t// Use the namespace if provided.\n\t\tif ( 'undefined' !== typeof namespace ) {\n\t\t\treturn (\n\t\t\t\thookName in hooksStore &&\n\t\t\t\thooksStore[ hookName ].handlers.some(\n\t\t\t\t\t( hook ) => hook.namespace === namespace\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\treturn hookName in hooksStore;\n\t};\n}\n\nexport default createHasHook;\n", "/**\n * Returns a function which, when invoked, will execute all callbacks\n * registered to a hook of the specified type, optionally returning the final\n * value of the call chain.\n *\n * @param {import('.').Hooks}    hooks                  Hooks instance.\n * @param {import('.').StoreKey} storeKey\n * @param {boolean}              [returnFirstArg=false] Whether each hook callback is expected to\n *                                                      return its first argument.\n *\n * @return {(hookName:string, ...args: unknown[]) => undefined|unknown} Function that runs hook callbacks.\n */\nfunction createRunHook( hooks, storeKey, returnFirstArg = false ) {\n\treturn function runHooks( hookName, ...args ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\tif ( ! hooksStore[ hookName ] ) {\n\t\t\thooksStore[ hookName ] = {\n\t\t\t\thandlers: [],\n\t\t\t\truns: 0,\n\t\t\t};\n\t\t}\n\n\t\thooksStore[ hookName ].runs++;\n\n\t\tconst handlers = hooksStore[ hookName ].handlers;\n\n\t\t// The following code is stripped from production builds.\n\t\tif ( 'production' !== process.env.NODE_ENV ) {\n\t\t\t// Handle any 'all' hooks registered.\n\t\t\tif ( 'hookAdded' !== hookName && hooksStore.all ) {\n\t\t\t\thandlers.push( ...hooksStore.all.handlers );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! handlers || ! handlers.length ) {\n\t\t\treturn returnFirstArg ? args[ 0 ] : undefined;\n\t\t}\n\n\t\tconst hookInfo = {\n\t\t\tname: hookName,\n\t\t\tcurrentIndex: 0,\n\t\t};\n\n\t\thooksStore.__current.push( hookInfo );\n\n\t\twhile ( hookInfo.currentIndex < handlers.length ) {\n\t\t\tconst handler = handlers[ hookInfo.currentIndex ];\n\n\t\t\tconst result = handler.callback.apply( null, args );\n\t\t\tif ( returnFirstArg ) {\n\t\t\t\targs[ 0 ] = result;\n\t\t\t}\n\n\t\t\thookInfo.currentIndex++;\n\t\t}\n\n\t\thooksStore.__current.pop();\n\n\t\tif ( returnFirstArg ) {\n\t\t\treturn args[ 0 ];\n\t\t}\n\n\t\treturn undefined;\n\t};\n}\n\nexport default createRunHook;\n", "/**\n * Returns a function which, when invoked, will return the name of the\n * currently running hook, or `null` if no hook of the given type is currently\n * running.\n *\n * @param {import('.').Hooks}    hooks    Hooks instance.\n * @param {import('.').StoreKey} storeKey\n *\n * @return {() => string | null} Function that returns the current hook name or null.\n */\nfunction createCurrentHook( hooks, storeKey ) {\n\treturn function currentHook() {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\treturn (\n\t\t\thooksStore.__current[ hooksStore.__current.length - 1 ]?.name ??\n\t\t\tnull\n\t\t);\n\t};\n}\n\nexport default createCurrentHook;\n", "/**\n * @callback DoingHook\n * Returns whether a hook is currently being executed.\n *\n * @param {string} [hookName] The name of the hook to check for.  If\n *                            omitted, will check for any hook being executed.\n *\n * @return {boolean} Whether the hook is being executed.\n */\n\n/**\n * Returns a function which, when invoked, will return whether a hook is\n * currently being executed.\n *\n * @param {import('.').Hooks}    hooks    Hooks instance.\n * @param {import('.').StoreKey} storeKey\n *\n * @return {DoingHook} Function that returns whether a hook is currently\n *                     being executed.\n */\nfunction createDoingHook( hooks, storeKey ) {\n\treturn function doingHook( hookName ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\t// If the hookName was not passed, check for any current hook.\n\t\tif ( 'undefined' === typeof hookName ) {\n\t\t\treturn 'undefined' !== typeof hooksStore.__current[ 0 ];\n\t\t}\n\n\t\t// Return the __current hook.\n\t\treturn hooksStore.__current[ 0 ]\n\t\t\t? hookName === hooksStore.__current[ 0 ].name\n\t\t\t: false;\n\t};\n}\n\nexport default createDoingHook;\n", "/**\n * Internal dependencies\n */\nimport validateHookName from './validateHookName.js';\n\n/**\n * @callback DidHook\n *\n * Returns the number of times an action has been fired.\n *\n * @param {string} hookName The hook name to check.\n *\n * @return {number | undefined} The number of times the hook has run.\n */\n\n/**\n * Returns a function which, when invoked, will return the number of times a\n * hook has been called.\n *\n * @param {import('.').Hooks}    hooks    Hooks instance.\n * @param {import('.').StoreKey} storeKey\n *\n * @return {DidHook} Function that returns a hook's call count.\n */\nfunction createDidHook( hooks, storeKey ) {\n\treturn function didHook( hookName ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\tif ( ! validateHookName( hookName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn hooksStore[ hookName ] && hooksStore[ hookName ].runs\n\t\t\t? hooksStore[ hookName ].runs\n\t\t\t: 0;\n\t};\n}\n\nexport default createDidHook;\n", "/**\n * Internal dependencies\n */\nimport createAddHook from './createAddHook';\nimport createRemoveHook from './createRemoveHook';\nimport createHasHook from './createHasHook';\nimport createRunHook from './createRunHook';\nimport createCurrentHook from './createCurrentHook';\nimport createDoingHook from './createDoingHook';\nimport createDidHook from './createDidHook';\n\n/**\n * Internal class for constructing hooks. Use `createHooks()` function\n *\n * Note, it is necessary to expose this class to make its type public.\n *\n * @private\n */\nexport class _Hooks {\n\tconstructor() {\n\t\t/** @type {import('.').Store} actions */\n\t\tthis.actions = Object.create( null );\n\t\tthis.actions.__current = [];\n\n\t\t/** @type {import('.').Store} filters */\n\t\tthis.filters = Object.create( null );\n\t\tthis.filters.__current = [];\n\n\t\tthis.addAction = createAddHook( this, 'actions' );\n\t\tthis.addFilter = createAddHook( this, 'filters' );\n\t\tthis.removeAction = createRemoveHook( this, 'actions' );\n\t\tthis.removeFilter = createRemoveHook( this, 'filters' );\n\t\tthis.hasAction = createHasHook( this, 'actions' );\n\t\tthis.hasFilter = createHasHook( this, 'filters' );\n\t\tthis.removeAllActions = createRemoveHook( this, 'actions', true );\n\t\tthis.removeAllFilters = createRemoveHook( this, 'filters', true );\n\t\tthis.doAction = createRunHook( this, 'actions' );\n\t\tthis.applyFilters = createRunHook( this, 'filters', true );\n\t\tthis.currentAction = createCurrentHook( this, 'actions' );\n\t\tthis.currentFilter = createCurrentHook( this, 'filters' );\n\t\tthis.doingAction = createDoingHook( this, 'actions' );\n\t\tthis.doingFilter = createDoingHook( this, 'filters' );\n\t\tthis.didAction = createDidHook( this, 'actions' );\n\t\tthis.didFilter = createDidHook( this, 'filters' );\n\t}\n}\n\n/** @typedef {_Hooks} Hooks */\n\n/**\n * Returns an instance of the hooks object.\n *\n * @return {Hooks} A Hooks instance.\n */\nfunction createHooks() {\n\treturn new _Hooks();\n}\n\nexport default createHooks;\n", "/**\n * Internal dependencies\n */\nimport createHooks from './createHooks';\n\n/** @typedef {(...args: any[])=>any} Callback */\n\n/**\n * @typedef Handler\n * @property {Callback} callback  The callback\n * @property {string}   namespace The namespace\n * @property {number}   priority  The namespace\n */\n\n/**\n * @typedef Hook\n * @property {Handler[]} handlers Array of handlers\n * @property {number}    runs     Run counter\n */\n\n/**\n * @typedef Current\n * @property {string} name         Hook name\n * @property {number} currentIndex The index\n */\n\n/**\n * @typedef {Record<string, Hook> & {__current: Current[]}} Store\n */\n\n/**\n * @typedef {'actions' | 'filters'} StoreKey\n */\n\n/**\n * @typedef {import('./createHooks').Hooks} Hooks\n */\n\nexport const defaultHooks = createHooks();\n\nconst {\n\taddAction,\n\taddFilter,\n\tremoveAction,\n\tremoveFilter,\n\thasAction,\n\thasFilter,\n\tremoveAllActions,\n\tremoveAllFilters,\n\tdoAction,\n\tapplyFilters,\n\tcurrentAction,\n\tcurrentFilter,\n\tdoingAction,\n\tdoingFilter,\n\tdidAction,\n\tdidFilter,\n\tactions,\n\tfilters,\n} = defaultHooks;\n\nexport {\n\tcreateHooks,\n\taddAction,\n\taddFilter,\n\tremoveAction,\n\tremoveFilter,\n\thasAction,\n\thasFilter,\n\tremoveAllActions,\n\tremoveAllFilters,\n\tdoAction,\n\tapplyFilters,\n\tcurrentAction,\n\tcurrentFilter,\n\tdoingAction,\n\tdoingFilter,\n\tdidAction,\n\tdidFilter,\n\tactions,\n\tfilters,\n};\n"],
  "mappings": "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",
  "names": ["validateNamespace", "namespace", "console", "error", "test", "validateHookName", "hookName", "console", "error", "test", "createAddHook", "hooks", "storeKey", "addHook", "hookName", "namespace", "callback", "priority", "hooksStore", "validateHookName", "validateNamespace", "console", "error", "handler", "handlers", "i", "length", "splice", "__current", "forEach", "hookInfo", "name", "currentIndex", "runs", "doAction", "createRemoveHook", "hooks", "storeKey", "removeAll", "removeHook", "hookName", "namespace", "hooksStore", "validateHookName", "validateNamespace", "handlersRemoved", "handlers", "length", "runs", "i", "splice", "__current", "forEach", "hookInfo", "name", "currentIndex", "doAction", "createHasHook", "hooks", "storeKey", "hasHook", "hookName", "namespace", "hooksStore", "handlers", "some", "hook", "createRunHook", "hooks", "storeKey", "returnFirstArg", "runHooks", "hookName", "args", "hooksStore", "handlers", "runs", "all", "push", "length", "undefined", "hookInfo", "name", "currentIndex", "__current", "handler", "result", "callback", "apply", "pop", "createCurrentHook", "hooks", "storeKey", "currentHook", "_hooksStore$__current", "hooksStore", "__current", "length", "name", "createDoingHook", "hooks", "storeKey", "doingHook", "hookName", "hooksStore", "__current", "name", "createDidHook", "hooks", "storeKey", "didHook", "hookName", "hooksStore", "validateHookName", "runs", "_Hooks", "constructor", "actions", "Object", "create", "__current", "filters", "addAction", "createAddHook", "addFilter", "removeAction", "createRemoveHook", "removeFilter", "hasAction", "createHasHook", "hasFilter", "removeAllActions", "removeAllFilters", "doAction", "createRunHook", "applyFilters", "currentAction", "createCurrentHook", "currentFilter", "doingAction", "createDoingHook", "doingFilter", "didAction", "createDidHook", "didFilter", "createHooks", "defaultHooks", "createHooks", "addAction", "addFilter", "removeAction", "removeFilter", "hasAction", "hasFilter", "removeAllActions", "removeAllFilters", "doAction", "applyFilters", "currentAction", "currentFilter", "doingAction", "doingFilter", "didAction", "didFilter", "actions", "filters"]
}
